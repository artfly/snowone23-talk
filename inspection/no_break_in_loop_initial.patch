Index: plugins/InspectionGadgets/src/inspectionDescriptions/NoBreakInIfInLoop.html
===================================================================
diff --git a/plugins/InspectionGadgets/src/inspectionDescriptions/NoBreakInIfInLoop.html b/plugins/InspectionGadgets/src/inspectionDescriptions/NoBreakInIfInLoop.html
new file mode 100644
--- /dev/null	
+++ b/plugins/InspectionGadgets/src/inspectionDescriptions/NoBreakInIfInLoop.html	
@@ -0,0 +1,26 @@
+<!-- Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->
+<html>
+<body>
+Reports <code>if</code> statements inside loops which can contain <code>break</code> inside and semantics won't change.
+<p><b>Example:</b></p>
+<pre><code>
+  boolean found = false;
+  for (int i : arr) {
+    if (i > 10) {
+      found = true;
+    }
+  }
+</code></pre>
+<p>Can be replaced with:</p>
+<pre><code>
+  boolean found = false;
+  for (int i : arr) {
+    if (i > 10) {
+      found = true;
+      break;
+    }
+  }
+</code></pre>
+<!-- tooltip end -->
+</body>
+</html>
\ No newline at end of file
Index: plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/performance/NoBreakInIfInLoopInspection.java
===================================================================
diff --git a/plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/performance/NoBreakInIfInLoopInspection.java b/plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/performance/NoBreakInIfInLoopInspection.java
new file mode 100644
--- /dev/null	
+++ b/plugins/InspectionGadgets/InspectionGadgetsAnalysis/src/com/siyeh/ig/performance/NoBreakInIfInLoopInspection.java	
@@ -0,0 +1,39 @@
+// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
+package com.siyeh.ig.performance;
+
+import com.intellij.psi.PsiBlockStatement;
+import com.intellij.psi.PsiStatement;
+import com.siyeh.InspectionGadgetsBundle;
+import com.siyeh.ig.BaseInspection;
+import com.siyeh.ig.BaseInspectionVisitor;
+import com.siyeh.ig.psiutils.ControlFlowUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class NoBreakInIfInLoopInspection extends BaseInspection {
+
+  @Override
+  protected @NotNull String buildErrorString(Object... infos) {
+    return InspectionGadgetsBundle.message("no.break.in.if.in.loop.descriptor");
+  }
+
+  /*
+  for (..) { if_statement }
+  for (..) if_statement
+  if_statement := if (...) { assignment }
+  if_statement := if (...) assignment
+  assignment := var_ref = true;
+ */
+  @Override
+  public BaseInspectionVisitor buildVisitor() {
+  }
+
+  @Nullable
+  private static PsiStatement getOnlyStatement(@Nullable PsiStatement body) {
+    if (body == null) return null;
+    if (body instanceof PsiBlockStatement blockStatement) {
+      body = ControlFlowUtils.getOnlyStatementInBlock(blockStatement.getCodeBlock());
+    }
+    return body;
+  }
+}
Index: plugins/InspectionGadgets/src/META-INF/InspectionGadgets.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/InspectionGadgets/src/META-INF/InspectionGadgets.xml b/plugins/InspectionGadgets/src/META-INF/InspectionGadgets.xml
--- a/plugins/InspectionGadgets/src/META-INF/InspectionGadgets.xml	
+++ b/plugins/InspectionGadgets/src/META-INF/InspectionGadgets.xml	
@@ -1876,6 +1876,10 @@
                      key="manual.array.to.collection.copy.display.name" groupBundle="messages.InspectionsBundle"
                      groupKey="group.names.performance.issues" enabledByDefault="true" level="WARNING"
                      implementationClass="com.siyeh.ig.performance.ManualArrayToCollectionCopyInspection" cleanupTool="true"/>
+    <localInspection groupPath="Java" language="JAVA" shortName="NoBreakInIfInLoop" bundle="messages.InspectionGadgetsBundle"
+                     key="no.break.in.if.in.loop.display.name" groupBundle="messages.InspectionsBundle"
+                     groupKey="group.names.performance.issues" enabledByDefault="true" level="WARNING"
+                     implementationClass="com.siyeh.ig.performance.NoBreakInIfInLoopInspection"/>
     <localInspection groupPath="Java" language="JAVA" shortName="ManualArrayCopy" bundle="messages.InspectionGadgetsBundle" key="manual.array.copy.display.name"
                      groupBundle="messages.InspectionsBundle" groupKey="group.names.performance.issues" enabledByDefault="true"
                      level="WARNING" implementationClass="com.siyeh.ig.performance.ManualArrayCopyInspection" cleanupTool="true"/>
@@ -1963,10 +1967,10 @@
     <localInspection groupPath="Java" language="JAVA" shortName="ListRemoveInLoop" bundle="messages.InspectionGadgetsBundle" key="inspection.list.remove.in.loop.display.name"
                      groupBundle="messages.InspectionsBundle" groupKey="group.names.performance.issues" enabledByDefault="true"
                      level="WARNING" implementationClass="com.siyeh.ig.performance.ListRemoveInLoopInspection"/>
-    <localInspection groupPath="Java" language="JAVA" shortName="IfStatementMissingBreakInLoop" bundle="messages.InspectionGadgetsBundle"
-                     key="inspection.if.statement.missing.break.in.loop.name"
-                     groupBundle="messages.InspectionsBundle" groupKey="group.names.performance.issues" enabledByDefault="true"
-                     level="WARNING" implementationClass="com.siyeh.ig.performance.IfStatementMissingBreakInLoopInspection" cleanupTool="true"/>
+    <!--<localInspection groupPath="Java" language="JAVA" shortName="IfStatementMissingBreakInLoop" bundle="messages.InspectionGadgetsBundle"-->
+    <!--                 key="inspection.if.statement.missing.break.in.loop.name"-->
+    <!--                 groupBundle="messages.InspectionsBundle" groupKey="group.names.performance.issues" enabledByDefault="true"-->
+    <!--                 level="WARNING" implementationClass="com.siyeh.ig.performance.IfStatementMissingBreakInLoopInspection" cleanupTool="true"/>-->
     <localInspection groupPath="Java" language="JAVA" shortName="AutoUnboxing" bundle="messages.InspectionGadgetsBundle" key="auto.unboxing.display.name"
                      groupBundle="messages.InspectionsBundle" groupKey="group.names.performance.issues" enabledByDefault="false"
                      level="WARNING" implementationClass="com.siyeh.ig.jdk.AutoUnboxingInspection"/>
Index: plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties b/plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties
--- a/plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties	
+++ b/plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties	
@@ -610,6 +610,7 @@
 cast.that.loses.precision.display.name=Numeric cast that loses precision
 manual.array.copy.display.name=Manual array copy
 manual.array.to.collection.copy.display.name=Manual array to collection copy
+no.break.in.if.in.loop.display.name=No break in if in loop
 long.literals.ending.with.lowercase.l.display.name='long' literal ending with 'l' instead of 'L'
 overly.complex.arithmetic.expression.display.name=Overly complex arithmetic expression
 junit.abstract.test.class.naming.convention.element.description=Abstract test class
@@ -1057,6 +1058,7 @@
 string.equals.empty.string.problem.descriptor=<code>#ref("")</code> can be replaced with 'length()==0' #loc
 string.equals.empty.string.is.empty.problem.descriptor=<code>#ref("")</code> can be replaced with 'isEmpty()' #loc
 random.double.for.random.integer.problem.descriptor=Using <code>Random.#ref</code> to create random integer #loc
+no.break.in.if.in.loop.descriptor=No breaks!1!1!
 manual.array.copy.problem.descriptor=Manual array copy #loc
 manual.array.to.collection.copy.problem.descriptor=Manual array to collection copy #loc
 call.to.simple.getter.in.class.problem.descriptor=Call to simple getter <code>#ref()</code> from within class #loc
@@ -2286,6 +2288,8 @@
 inspection.if.statement.missing.break.in.loop.description=Loop can be terminated after condition is met
 inspection.if.statement.missing.break.in.loop.quickfix=Add 'break'
 
+inspection.no.break.in.if.in.loop.description=Loop can be terminated inside 'if'
+
 inspection.case.mismatch.display.name=Mismatched case in 'String' operation
 inspection.case.mismatch.message.arg.is.lower=Method ''{0}()'' always returns {1}: the argument contains a lowercase symbol while the qualifier is uppercase-only
 inspection.case.mismatch.message.arg.is.upper=Method ''{0}()'' always returns {1}: the argument contains an uppercase symbol while the qualifier is lowercase-only
